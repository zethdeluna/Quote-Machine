{"version":3,"sources":["QuoteMachine.js","App.js","reportWebVitals.js","index.js"],"names":["xml","XMLHttpRequest","open","send","quotes","JSON","parse","responseText","colors","QuoteMachine","props","state","currentQuote","currentAuthor","currentColor","newQuote","bind","randomQuote","Math","floor","random","length","randomColor","this","setState","quote","author","styles","color","document","querySelector","style","backgroundColor","uri","shareQuote","encodeURIComponent","className","class","href","target","rel","onClick","Component","App","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oQAGIA,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAO,4IAA4I,GAC5JF,EAAIG,KAAK,MACT,IACIC,EADaC,KAAKC,MAAMN,EAAIO,cACRH,OAUxB,IAAII,EAAS,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,W,IA2DWC,E,kDAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,aAAc,gBACdC,cAAe,iBACfC,aAAc,WAElB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAPD,E,4CASnB,WACI,IAAIC,EAxCDb,EACHc,KAAKC,MAAMD,KAAKE,SAAWhB,EAAOiB,SAwC9BC,EAjBDd,EACHU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAOa,SAiBlCE,KAAKC,SAAS,CACVZ,aAAcK,EAAYQ,MAC1BZ,cAAeI,EAAYS,OAC3BZ,aAAcQ,M,oBAGtB,WACI,IAAIK,EAAS,CACTC,MAAOL,KAAKZ,MAAMG,cAERe,SAASC,cAAc,QAC7BC,MAAMC,gBAAkBT,KAAKZ,MAAMG,aAE3C,IAAImB,EAAMV,KAAKZ,MAAMC,aAAe,QAAUW,KAAKZ,MAAME,cACrDqB,EAAaC,mBAAmBF,GACpC,OACI,sBAAKF,MAAOJ,EAAZ,UACI,sBAAKS,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBb,KAAKZ,MAAMC,eAClC,qBAAIwB,UAAU,SAAd,cAAyBb,KAAKZ,MAAME,iBACpC,sBAAKwB,MAAM,cAAX,UACI,mBAAGC,KAAM,8EAAgFJ,EAAYK,OAAO,SAASC,IAAI,aAAzH,SAAsI,2CACtI,mBAAGH,MAAM,SAASC,KAAM,6FAA+FJ,EAAYK,OAAO,SAASC,IAAI,aAAvJ,SAAoK,kDAM5K,qBAAKJ,UAAU,gBAAf,SACI,wBAAQK,QAASlB,KAAKR,SAAUqB,UAAU,MAA1C,gC,GA1COM,aClBZC,E,4JATb,WACE,OACE,8BACE,cAAC,EAAD,U,GAJUC,IAAMF,WCATG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,M","file":"static/js/main.f0ff6506.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n// Get quotes from JSON link\nlet xml = new XMLHttpRequest();\nxml.open('GET', 'https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json', false);\nxml.send(null);\nlet quotesData = JSON.parse(xml.responseText);\nlet quotes = quotesData.quotes;\n\n// function for choosing a random quote\nfunction getRandomQuote() {\n    return quotes[\n        Math.floor(Math.random() * quotes.length)\n    ];\n}\n\n// background colors\nlet colors = [\n    '#C9C1E7',\n    '#BDD5EF',\n    '#C7E3D0',\n    '#F2D8CC',\n    '#E9CCCE',\n    '#E69B99',\n    '#B26C6B',\n    '#804040',\n    '#50161A',\n    '#2C0000',\n    '#93AAA5',\n    '#A3B79C',\n    '#57466D'\n  ];\n  \n  // function for choosing a random color\n  function getColor() {\n    return colors[\n        Math.floor(Math.random() * colors.length)\n    ];\n  }\n\nclass QuoteMachine extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentQuote: 'Hello, there.',\n            currentAuthor: 'Obi-Wan Kenobi',\n            currentColor: '#50161A'\n        }\n        this.newQuote = this.newQuote.bind(this);\n    }\n    newQuote() {\n        let randomQuote = getRandomQuote();\n        let randomColor = getColor();\n        this.setState({\n            currentQuote: randomQuote.quote,\n            currentAuthor: randomQuote.author,\n            currentColor: randomColor\n        });\n    }\n    render() {\n        let styles = {\n            color: this.state.currentColor\n        }\n        let docBody = document.querySelector(\"body\");\n        docBody.style.backgroundColor = this.state.currentColor;\n\n        let uri = this.state.currentQuote + '  -  ' + this.state.currentAuthor;\n        let shareQuote = encodeURIComponent(uri);\n        return (\n            <div style={styles}>\n                <div className=\"card\">\n                    <h1 className=\"quote\">{this.state.currentQuote}</h1>\n                    <h3 className=\"author\"> {this.state.currentAuthor}</h3>\n                    <div class=\"quote-tweet\">\n                        <a href={'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + shareQuote} target=\"_blank\" rel=\"noreferrer\"><span>tweet</span></a>\n                        <a class=\"tumblr\" href={'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' + shareQuote} target=\"_blank\" rel=\"noreferrer\"><span>tumblr</span></a>\n                    </div>\n                </div>\n\n                \n\n                <div className=\"btn-container\">\n                    <button onClick={this.newQuote} className=\"btn\">New Quote</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default QuoteMachine","import React from 'react';\nimport './App.css';\nimport QuoteMachine from './QuoteMachine';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <QuoteMachine />\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <QuoteMachine/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}